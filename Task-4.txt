1.What are the four access modifiers available in Java and what is their significance in terms of class, method, and variable accessibility?

 1.Public - class, Methods and variables can be accessed from any class.
 2.Private - Methods and variables can be accessed only within the class.
 3.Protected - Methods and variables can be accessed in the class of same package
 4.Default - Class, Methods and variables are accessible only within the same package 
 
2.What is the difference between Exception and error?
Error is a severe situation generated when the user performs an unexpected operation.
Exception is an event that occurs during the program execution and disrupts the normal flow of the programâ€™s execution.
Errors mostly happen at compile-time like syntax error; however it can happen at runtime as well. Whereas an Exception occurs at runtime

3.What is the difference between checked Exception and unchecked Exception?
Checked Exception:
        *Checked exceptions happen at compile time when the source code is transformed into an executable code.
		*It is checked by the compiler.
		*It can be created manually.
		*This exception is counted as a sub-class of the class.
		*JVM requires the exception to to be caught or handled.
		
Unchecked Exception:
        *Unchecked exceptions happen at runtime when the executable program starts running.
		*These types of exceptions are not checked by the compiler.
		*It can be created manually.
		*This exception happens in runtime, and hence it is not included in the exception class.
		*JVM does not need the exception to be caught or handled.
		
4.Write a Java program that reads user input for two integers and performs division Handle the exception,
that is thrown when the second number is zero, and display an error message to the user.



package task3;
import java.util.InputMismatchException;
import java.util.Scanner;
public class DivisionWithExceptionHandling {
	
	

	    public static void main(String[] args) {
	        Scanner scanner = new Scanner(System.in);
	        int numerator, denominator;
	        
	        try {
	            System.out.print("Enter the numerator: ");
	            numerator = scanner.nextInt();
	            
	            System.out.print("Enter the denominator: ");
	            denominator = scanner.nextInt();
	            
	            if (denominator == 0) {
	                throw new ArithmeticException("Division by zero is not allowed.");
	            }
	            
	            int result = numerator / denominator;
	            System.out.println("Result of division: " + result);
	        } catch (InputMismatchException e) {
	            System.out.println("Invalid input. Please enter valid integers.");
	        } catch (ArithmeticException e) {
	            System.out.println("Error: " + e.getMessage());
	        } finally {
	            scanner.close();
	        }
	    }
	}

	
	


Output:

Enter the numerator: 15
Enter the denominator: 5
Result of division: 3




5.Write the code of ArrayyIndexOutOfBoundsException & String IndexOutOfBoundsException?

package task3;

public class ArrayIndexExample {

	
	    public static void main(String[] args) {
	        int[] arr = {1, 2, 3};
	        
	        try {
	            int value = arr[3]; // Accessing an element at index 3 (out of bounds)
	            System.out.println("Value: " + value);
	        } catch (ArrayIndexOutOfBoundsException e) {
	            System.out.println("Error: " + e.getMessage());
	        }
	    }
	}

	
	
	
Output:
Error: Index 3 out of bounds for length 3



6.package task3;
import java.util.Scanner;

public class LoginSystem {

	

	    private static final String CORRECT_PASSWORD = "1234567890";

	    public static void main(String[] args) {
	        Scanner scanner = new Scanner(System.in);
	        String enteredPassword;

	        System.out.print("Enter your password: ");
	        enteredPassword = scanner.nextLine();

	        try {
	            if (checkPassword(enteredPassword)) {
	                System.out.println("Login successful. Welcome!");
	            } else {
	                throw new IncorrectPasswordException("Incorrect password. Please try again.");
	            }
	        } catch (IncorrectPasswordException e) {
	            System.out.println(e.getMessage());
	        } finally {
	            scanner.close();
	        }
	    }

	    static boolean checkPassword(String enteredPassword) {
	        return enteredPassword.equals(CORRECT_PASSWORD);
	    }
	}

	class IncorrectPasswordException extends Exception {
	    public IncorrectPasswordException(String message) {
	        super(message);
	    }
	}

	
	

Output:

Enter your password: 1235
Incorrect password. Please try again.



7.Create a custom exception in Java called "InvalidAgeException" that is thrown when the user enters an age less than 18 Implement exception handling 
in a Java program to catch the "InvalidAgeException and displays an error message.



package task3;

public class CustomExceptionExample {

	
	    public static void main(String[] args) {
	        try {
	            int age = getUserAge();
	            if (age < 18) {
	                throw new InvalidAgeException("Age must be 18 or older.");
	            }
	            System.out.println("valid: " + age);
	        } catch (InvalidAgeException e) {
	            System.out.println("Error: " + e.getMessage());
	        }
	    }

	    static int getUserAge() {
	        return 21; 
	    }
	}

	class InvalidAgeException extends Exception {
	    public InvalidAgeException(String message) {
	        super(message);
	    }
	}

	
	
Output:
valid: 21


8. Implement exception handling in a Java program that reads data from a file. If the file does not exist, 
throw a "FileNotFoundException" and display an error message to the user

package task3;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;


public class FileHandlingExample {

	
	
	    public static void main(String[] args) {
	        try {
	            String filename = "Task4.txt"; 
	            readFileContents(filename);
	        } catch (FileNotFoundException e) {
	            System.out.println("Error: " + e.getMessage());
	        }
	    }

	    static void readFileContents(String filename) throws FileNotFoundException {
	        File file = new File(filename);

	        if (!file.exists()) {
	            throw new FileNotFoundException("File not found: " + filename);
	        }

	        try (Scanner scanner = new Scanner(file)) {
	            while (scanner.hasNextLine()) {
	                String line = scanner.nextLine();
	                System.out.println(line);
	            }
	        } catch (FileNotFoundException e) {
	            throw e; 
	        }
	    }
	}

	
	
	
Output:
Error: File not found: Task4.txt

	


